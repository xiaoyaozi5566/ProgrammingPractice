Python path:
    #!/usr/bin/python
    
System arguments:
    import sys
    arg = sys.argv[1]

Power:
    2 ** 7

Print 
    raw string:
        >>> print r'C:\some\name'  # note the r before the quote
        C:\some\name
    avoid new line:
        print "hello",
    print multiple items:
        print a, b

Multi-line string:
    """..."""
    For example:
    print """\
    Usage: thingy [OPTIONS]
         -h                        Display this usage message
         -H hostname               Hostname to connect to
    """
    
Strings can be concatenated (glued together) with the + operator, and repeated with *:
    >>> 3 * 'un' + 'ium'
    'unununium'
    
Substring:
    word = 'Python'
    >>> word[0:2]  # characters from position 0 (included) to 2 (excluded)
    'Py'
    >>> word[2:5]  # characters from position 2 (included) to 5 (excluded)
    'tho'
    >>> word[:2]  # character from the beginning to position 2 (excluded)
    'Py'
    >>> word[4:]  # characters from position 4 (included) to the end
    'on'
    >>> word[-2:] # characters from the second-last (included) to the end
    'on'

Length of a string:
    >>> s = 'supercalifragilisticexpialidocious'
    >>> len(s)
    34

Lists:
    >>> squares = [1, 4, 9, 16, 25]
    >>> squares
    [1, 4, 9, 16, 25]

List operations:
    Cancatenation:
        >>> squares + [36, 49, 64, 81, 100]
        [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
    Append:
        >>> cubes.append(7 ** 3)  # and the cube of 7
        >>> cubes
        [1, 8, 27, 64, 125, 216, 343]
    Length:
        len(list)
    Nest lists:
        >>> a = ['a', 'b', 'c']
        >>> n = [1, 2, 3]
        >>> x = [a, n]
        >>> x
        [['a', 'b', 'c'], [1, 2, 3]]
        >>> x[0]
        ['a', 'b', 'c']
        >>> x[0][1]
        'b'
    Extend:
        list.extend(L)
    Insert:
        list.insert(index, x)
        Insert an item at a given position.
    Remove:
        list.remove(x)
        Remove the first item from the list whose value is x.
    Pop:
        list.pop([i])
        Remove the item at the given position in the list, and return it.
        If no index is specified, a.pop() removes and returns the last item 
        in the list.
    Lookup:
        list.index(x)
        Return the index in the list of the first item whose value is x.
    Count:
        list.count(x)
        Return the number of times x appears in the list
    Sort:
        list.sort(cmp=None, key=None, reverse=False)
        key is a function that operates on each element to generate sorting values
        >>> student_tuples = [
            ('john', 'A', 15),
            ('jane', 'B', 12),
            ('dave', 'B', 10),
        ]
        >>> sorted(student_tuples, key=lambda student: student[2])   # sort by age
        [('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]
        
        cmp is a function that operates on every two elements to compare
        >>> def numeric_compare(x, y):
                return x - y
        >>> sorted([5, 2, 4, 1, 3], cmp=numeric_compare)
        [1, 2, 3, 4, 5]
    Reverse:
        list.reverse()
        Reverse the elements of the list, in place.
    Delete:
        >>> a = [-1, 1, 66.25, 333, 333, 1234.5]
        >>> del a[0]
        >>> a
        [1, 66.25, 333, 333, 1234.5]

Range:
    >>> range(10)
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    >>> range(5, 10)
    [5, 6, 7, 8, 9]
    >>> range(0, 10, 3)
    [0, 3, 6, 9]
    
Common control flows:
    if statements:
        >>> if x < 0:
        ...     x = 0
        ...     print 'Negative changed to zero'
        ... elif x == 0:
        ...     print 'Zero'
        ... elif x == 1:
        ...     print 'Single'
        ... else:
        ...     print 'More'
    for statements:
        ... words = ['cat', 'window', 'defenestrate']
        >>> for w in words:
        ...     print w, len(w)
        
        >>> for i in range(len(a)):
        ...     print i, a[i]
    break statements:
        Same as C
    continue statements:
        Same as C

Pass:
    The pass statement does nothing. It can be used when a statement is required 
    syntactically but the program requires no action.
    
    >>> class MyEmptyClass:
    ...     pass
    ...
in:
    This tests whether or not a sequence contains a certain value.
    if ok in ('y', 'ye', 'yes'):
        return True
        
Functions:
    definition:
        >>> def fib(n):    # write Fibonacci series up to n
        ...     """Print a Fibonacci series up to n."""
        ...     a, b = 0, 1
        ...     while a < n:
        ...         print a,
        ...         a, b = b, a+b

    The first statement of the function body can optionally be a string literal; 
    this string literal is the function’s documentation string, or docstring.
    
    rename function:
        >>> f = fib
        >>> f(100)
    
    default argument values:
        def ask_ok(prompt, retries=4, complaint='Yes or no, please!'):
    
    keyword argument:
        def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
        parrot(voltage=1000000, action='VOOOOOM')             # 2 keyword arguments

Lambda expressions:
    >>> def make_incrementor(n):
    ...     return lambda x: x + n
    ...
    >>> f = make_incrementor(42)
    >>> f(0)
    42
    >>> f(1)
    43
    
    >>> pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
    >>> pairs.sort(key=lambda pair: pair[1])
    >>> pairs
    [(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]

Documentation of a function:
    >>> def my_function():
    ...     """Do nothing, but document it.
    ...
    ...     No, really, it doesn't do anything.
    ...     """
    ...     pass
    ...
    >>> print my_function.__doc__
    Do nothing, but document it.

        No, really, it doesn't do anything.

Fast queues:
    lists are not efficient for implementing queues. Use collections.deque.
    >>> from collections import deque
    >>> queue = deque(["Eric", "John", "Michael"])
    >>> queue.append("Terry")           # Terry arrives
    >>> queue.append("Graham")          # Graham arrives
    >>> queue.popleft()                 # The first to arrive now leaves
    'Eric'
    >>> queue.popleft()                 # The second to arrive now leaves
    'John'
    >>> queue                           # Remaining queue in order of arrival
    deque(['Michael', 'Terry', 'Graham'])

Filter:
    filter(function, sequence) returns a sequence consisting of those items 
    from the sequence for which function(item) is true.
    
    >>> def f(x): return x % 3 == 0 or x % 5 == 0
    ...
    >>> filter(f, range(2, 25))
    [3, 5, 6, 9, 10, 12, 15, 18, 20, 21, 24]

Map:
    map(function, sequence) calls function(item) for each of the sequence’s 
    items and returns a list of the return values.
    
    >>> def cube(x): return x*x*x
    ...
    >>> map(cube, range(1, 11))
    [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]

    >>> seq = range(8)
    >>> def add(x, y): return x+y
    ...
    >>> map(add, seq, seq)
    [0, 2, 4, 6, 8, 10, 12, 14]

Reduce:
    reduce(function, sequence) returns a single value constructed by calling 
    the binary function function on the first two items of the sequence, then 
    on the result and the next item
    
    >>> def add(x,y): return x+y
    ...
    >>> reduce(add, range(1, 11))
    55

    A third argument can be passed to indicate the starting value. 
    reduce(add, seq, 0)

List comprehension:
    squares = [x**2 for x in range(10)]

Tuple:
    A tuple consists of a number of values separated by commas (parentheses)
    >>> t = 12345, 54321, 'hello!'
    >>> t[0]
    12345
    >>> t
    (12345, 54321, 'hello!')
    
    Feature: immutable, heterogeneous
    
    >>> empty = ()
    >>> singleton = 'hello',    # <-- note trailing comma
    >>> len(empty)
    0
    >>> len(singleton)
    1
    >>> singleton
    ('hello',)
    
    unpacking a tuple:
    >>> x, y, z = t

Set:
    A set is an unordered collection with no duplicate elements. 
    Curly braces or the set() function can be used to create sets.
    Note: to create an empty set you have to use set(), not {};
    
    >>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
    >>> fruit = set(basket)               # create a set without duplicates
    >>> fruit
    set(['orange', 'pear', 'apple', 'banana'])
    >>> 'orange' in fruit                 # fast membership testing
    True
    >>> 'crabgrass' in fruit
    False
    
    >>> # Demonstrate set operations on unique letters from two words
    ...
    >>> a = set('abracadabra')
    >>> b = set('alacazam')
    >>> a                                  # unique letters in a
    set(['a', 'r', 'b', 'c', 'd'])
    >>> a - b                              # letters in a but not in b
    set(['r', 'd', 'b'])
    >>> a | b                              # letters in either a or b
    set(['a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'])
    >>> a & b                              # letters in both a and b
    set(['a', 'c'])
    >>> a ^ b                              # letters in a or b but not both
    set(['r', 'd', 'b', 'm', 'z', 'l'])

Dictionary (associative arrays):
    think of a dictionary as an unordered set of key: value pairs, with 
    the requirement that the keys are unique (within one dictionary).
    
    >>> tel = {'jack': 4098, 'sape': 4139}
    >>> tel['guido'] = 4127
    >>> tel
    {'sape': 4139, 'guido': 4127, 'jack': 4098}
    >>> tel['jack']
    4098
    >>> del tel['sape']
    >>> tel['irv'] = 4127
    >>> tel
    {'guido': 4127, 'irv': 4127, 'jack': 4098}
    >>> tel.keys()
    ['guido', 'irv', 'jack']
    >>> 'guido' in tel
    True
    
    >>> dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])
    {'sape': 4139, 'jack': 4098, 'guido': 4127}

Enumerate:
    the position index and corresponding value can be retrieved at the same 
    time using the enumerate() function.
    
    >>> for i, v in enumerate(['tic', 'tac', 'toe']):
    ...     print i, v
    ...
    0 tic
    1 tac
    2 toe

zip:
    >>> questions = ['name', 'quest', 'favorite color']
    >>> answers = ['lancelot', 'the holy grail', 'blue']
    >>> for q, a in zip(questions, answers):
    ...     print 'What is your {0}?  It is {1}.'.format(q, a)